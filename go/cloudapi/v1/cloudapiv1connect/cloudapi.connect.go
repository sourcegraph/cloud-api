// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudapi/v1/cloudapi.proto

package cloudapiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/sourcegraph/cloud-api/go/cloudapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// InstanceServiceName is the fully-qualified name of the InstanceService service.
	InstanceServiceName = "cloudapi.v1.InstanceService"
)

// InstanceServiceClient is a client for the cloudapi.v1.InstanceService service.
type InstanceServiceClient interface {
	ListInstances(context.Context, *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error)
}

// NewInstanceServiceClient constructs a client for the cloudapi.v1.InstanceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstanceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InstanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &instanceServiceClient{
		listInstances: connect_go.NewClient[v1.ListInstancesRequest, v1.ListInstancesResponse](
			httpClient,
			baseURL+"/cloudapi.v1.InstanceService/ListInstances",
			opts...,
		),
	}
}

// instanceServiceClient implements InstanceServiceClient.
type instanceServiceClient struct {
	listInstances *connect_go.Client[v1.ListInstancesRequest, v1.ListInstancesResponse]
}

// ListInstances calls cloudapi.v1.InstanceService.ListInstances.
func (c *instanceServiceClient) ListInstances(ctx context.Context, req *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error) {
	return c.listInstances.CallUnary(ctx, req)
}

// InstanceServiceHandler is an implementation of the cloudapi.v1.InstanceService service.
type InstanceServiceHandler interface {
	ListInstances(context.Context, *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error)
}

// NewInstanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstanceServiceHandler(svc InstanceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/cloudapi.v1.InstanceService/ListInstances", connect_go.NewUnaryHandler(
		"/cloudapi.v1.InstanceService/ListInstances",
		svc.ListInstances,
		opts...,
	))
	return "/cloudapi.v1.InstanceService/", mux
}

// UnimplementedInstanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstanceServiceHandler struct{}

func (UnimplementedInstanceServiceHandler) ListInstances(context.Context, *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cloudapi.v1.InstanceService.ListInstances is not implemented"))
}
